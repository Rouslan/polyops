import enum
from typing import Any
from collections.abc import Iterable
import numpy as np

PointArray = np.ndarray[Any,np.dtype[np.int32]]
LoopTree = tuple[tuple[PointArray,'LoopTree'],...]

class BoolOp(enum.Enum):
    union = ...
    intersection = ...
    xor = ...
    difference = ...

class BoolCat(enum.Enum):
    subject = ...
    clip = ...

def union_tree(loops: Iterable[PointArray]) -> LoopTree: ...

def union_flat(loops: Iterable[PointArray]) -> tuple[PointArray,...]: ...

def boolean_op_tree(subject: Iterable[PointArray],clip: Iterable[PointArray],op: BoolOp) -> LoopTree: ...

def boolean_op_flat(loops: Iterable[PointArray],clip: Iterable[PointArray],op: BoolOp) -> tuple[PointArray,...]: ...

def winding_dir(loop: PointArray) -> int: ...

class Clipper:
    def add_loop(self,loop: PointArray,cat: BoolCat) -> None: ...

    def add_loop_subject(self,loop: PointArray) -> None: ...

    def add_loop_clip(self,loop: PointArray) -> None: ...

    def add_loops(self,loops: Iterable[PointArray],cat: BoolCat) -> None: ...

    def add_loops_subject(self,loops: Iterable[PointArray]) -> None: ...

    def add_loops_clip(self,loops: Iterable[PointArray]) -> None: ...

    def execute_tree(self,op: BoolOp) -> LoopTree: ...

    def execute_flat(self,op: BoolOp) -> tuple[PointArray,...]: ...

    def reset(self) -> None: ...
