poly_ops/clipper.hpp
=====================

.. cpp:namespace:: poly_ops


Macros
------------------

.. c:macro:: POLY_OPS_HAVE_128BIT_INT

    If :cpp:class:`basic_int128` is defined, this has a value of 1. Otherwise,
    this is 0.


Types
------------------

.. cpp:class:: basic_int128

    A signed 128-bit integer.

    This only supports some of the operations that built-in integers support:
    addition, subtraction, negation and comparison. Multiplication and bit-wise
    operations are absent. Additionally, the standard library will not recognize
    this class as an integer (e.g.: ``std::is_integer<poly_ops::basic128>`` will
    have a value of `false`).

    .. cpp:function:: basic_int128() noexcept = default

    .. cpp:function:: basic_int128(__int128 x) noexcept

        This constructor is only defined for compilers that have a built-in
        128-bit type named __int128

    .. cpp:function:: basic_int128(std::integral auto x) noexcept

    .. cpp:function:: explicit basic_int128(std::floating_point auto x) noexcept

    .. cpp:function:: basic_int128(std::uint64_t hi,std::uint64_t lo) noexcept

    .. cpp:function:: basic_int128(const basic_int128&) noexcept = default

    .. cpp:function:: basic_int128 &operator=(const basic_int128&) noexcept = default

    .. cpp:function:: basic_int128 &operator=(std::integral auto b) noexcept

    .. cpp:function:: basic_int128 &operator+=(basic_int128 b) noexcept

    .. cpp:function:: basic_int128 &operator+=(std::integral auto b) noexcept

    .. cpp:function:: basic_int128 &operator-=(basic_int128 b) noexcept

    .. cpp:function:: basic_int128 &operator-=(std::integral auto b) noexcept

    .. cpp:function:: basic_int128 operator-() const noexcept

    .. cpp:function:: operator __int128() const noexcept

        This operator is only defined for compilers that have a built-in 128-bit
        type named __int128

    .. cpp:function:: template<typename T>\
        requires std::integral<T> || std::floating_point<T>\
        explicit operator T() const noexcept
    
    .. cpp:function:: explicit operator bool() const noexcept

    .. cpp:function:: friend basic_int128 operator+(basic_int128 a,basic_int128 b) noexcept

    .. cpp:function:: friend basic_int128 operator+(std::integral auto a,basic_int128 b) noexcept

    .. cpp:function:: friend basic_int128 operator+(basic_int128 a,std::integral auto b) noexcept

    .. cpp:function:: friend basic_int128 operator-(basic_int128 a,basic_int128 b) noexcept

    .. cpp:function:: friend basic_int128 operator-(std::integral auto a,basic_int128 b) noexcept

    .. cpp:function:: friend basic_int128 operator-(basic_int128 a,std::integral auto b) noexcept

    .. cpp:function:: friend bool operator==(basic_int128 a,basic_int128 b) noexcept

    .. cpp:function:: friend bool operator==(std::integral auto a,basic_int128 b) noexcept

    .. cpp:function:: friend bool operator==(basic_int128 a,std::integral auto b) noexcept

    .. cpp:function:: friend auto operator<=>(basic_int128 a,basic_int128 b) noexcept

    .. cpp:function:: friend auto operator<=>(std::integral auto a,basic_int128 b) noexcept

    .. cpp:function:: friend auto operator<=>(basic_int128 a,std::integral auto b) noexcept

    .. cpp:function:: std::uint64_t lo() const noexcept

    .. cpp:function:: std::uint64_t hi() const noexcept

    .. cpp:function:: static basic_int128 mul(std::int64_t a,std::int64_t b) noexcept
